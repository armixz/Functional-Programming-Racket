((divisible-by-x? 3) 12)
((divisible-by-x? 7) 20)
(div-by-5 15)
------------------------------------
(function-9 sqrt)
(function-9 add1)
(function-9 (lambda (x) (+ x 7)))
------------------------------------ 
(my-map sqrt '(9 25 81 49))
(my-map add1 '(6 4 8 3))
(my-map (lambda (n) (* n n)) '(5 7))
(my-map even? '(2 5 7 12))
------------------------------------
(pair-up '(1 2 3 4) '(a b c d))
(pair-up '(1 2 3) '(4 9 5 7))
(pair-up '(3 5 6) '("one" 6.18 #t "two"))
------------------------------------------
(classify even? '(7 2 3 5 8))
(classify integer? '(3.0 -5.2 8 16 99.7))
(classify real? '())
------------------------------------------
(is-member? 6 '(4 8 6 2 1))
(is-member? 7 '(4 8 6 2 1))
(is-member? "foo" '(4 5 #f "foo" a))
(is-member? '(3 4)  '(4 5 #f "foo" (3 4)))
-------------------------------------------
(my-sorted? < '(2 5 6 9 11 34))
(my-sorted? < '(7 25 4 15 11 34))
(my-sorted? string<? '("alpha" "beta" "gamma"))
(my-sorted? string<? '("john" "zack" "bob"))
--------------------------------------------------
(my-flatten '(1))
(my-flatten '((1 2) 3))
(my-flatten '(((4 3) 6)((7 2 9)(5 1))))
--------------------------------------------------
(upper-threshold '(3 6.2 7 2 9 5.3 1) 6)
(upper-threshold '(1 2 3 4 5) 4)
(upper-threshold '(4 8 5 6 7) 6.1)
(upper-threshold '(8 3 5 7) 2)
-------------------------------------------------
(my-list-ref '(4 7 9) 0)
(my-list-ref '(4 7 9) 1)
(my-list-ref '(4 7 9) 3)
----------------------------------------------
(deep-reverse '(((4 3) 6)((7 2 9)(5 1))))
(deep-reverse '((1 2) 3))
(deep-reverse '((4 5)))
(deep-reverse '(3 6 9 12))
------------------------------------------------